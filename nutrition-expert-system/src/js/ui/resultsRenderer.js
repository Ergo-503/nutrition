// resultsRenderer.js

export function displayNutritionalNeeds(nutritionalNeeds) {
    const needsText = `
üî• –ö–∞–ª–æ—Ä—ñ—ó: ${Math.round(nutritionalNeeds.tdee)} –∫–∫–∞–ª/–¥–µ–Ω—å
ü•© –ë—ñ–ª–∫–∏: ${nutritionalNeeds.macros.protein} –≥ (${(nutritionalNeeds.macros.protein * 4 / nutritionalNeeds.tdee * 100).toFixed(1)}%)
ü•ë –ñ–∏—Ä–∏: ${nutritionalNeeds.macros.fat} –≥ (${(nutritionalNeeds.macros.fat * 9 / nutritionalNeeds.tdee * 100).toFixed(1)}%)
üçû –í—É–≥–ª–µ–≤–æ–¥–∏: ${nutritionalNeeds.macros.carbs} –≥ (${(nutritionalNeeds.macros.carbs * 4 / nutritionalNeeds.tdee * 100).toFixed(1)}%)

üìà BMR: ${Math.round(nutritionalNeeds.bmr)} –∫–∫–∞–ª
‚ö° TDEE: ${Math.round(nutritionalNeeds.tdee)} –∫–∫–∞–ª
üéØ –ú–µ—Ç–∞: ${nutritionalNeeds.userData.goal}`;

    document.getElementById('nutritionalNeeds').textContent = needsText;
}

export function displayProducts(products) {
    let productsText = "üìã –°–ü–ò–°–û–ö –ü–†–û–î–£–ö–¢–Ü–í:\n";
    products.forEach(product => {
        productsText += `${product.amount} –≥ ${product.Name} (–ö–∞–ª–æ—Ä—ñ—ó: ${product.actualCalories}, –ë—ñ–ª–∫–∏: ${product.actualProtein}, –ñ–∏—Ä–∏: ${product.actualFat}, –í—É–≥–ª–µ–≤–æ–¥–∏: ${product.actualCarbs})\n`;
    });
    document.getElementById('productsList').textContent = productsText;
}

export function displayExplanation(explanation) {
    document.getElementById('explanation').textContent = explanation;
}

export function displayCharts(macroData, weightData) {
    const macroChartCtx = document.getElementById('macroChart').getContext('2d');
    const weightChartCtx = document.getElementById('weightChart').getContext('2d');

    new Chart(macroChartCtx, {
        type: 'pie',
        data: {
            labels: ['–ë—ñ–ª–∫–∏', '–ñ–∏—Ä–∏', '–í—É–≥–ª–µ–≤–æ–¥–∏'],
            datasets: [{
                data: [macroData.protein, macroData.fat, macroData.carbs],
                backgroundColor: ['#3498db', '#e74c3c', '#27ae60']
            }]
        }
    });

    new Chart(weightChartCtx, {
        type: 'line',
        data: {
            labels: weightData.labels,
            datasets: [{
                label: '–ü—Ä–æ–≥–Ω–æ–∑ –∑–º—ñ–Ω–∏ –≤–∞–≥–∏',
                data: weightData.values,
                borderColor: '#3498db',
                fill: false
            }]
        }
    });
}